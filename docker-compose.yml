version: '3.9'
services:
    postgresql:
        stop_grace_period: 3s
        restart: unless-stopped
        environment:
            POSTGRES_PASSWORD: ${PSQL_PASSWORD:?error}
            POSTGRES_DB: ${PSQL_DATABASE:?error}
            PGDATA: /var/lib/postgresql/data/pgdata
        image: postgres:14
        healthcheck:
            test: [ 'CMD-SHELL', 'pg_isready -U postgres' ]
        volumes:
            - ./docker/postgresql:/var/lib/postgresql/data/pgdata
        networks:
            - backend
        expose:
            - 5432
    backend:
        command: bash -c "yarn install && yarn run build && yarn run start:prod"
        stop_grace_period: 3s
        restart: unless-stopped
        env_file:
            - .env.backend
            - .env
        depends_on:
            - postgresql
        build:
            context: .
            target: backend
        healthcheck:
            test: [ 'CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/api/ping || exit 1' ]
        volumes:
            - ./backend:/app
        networks:
            - backend
            - frontend
        expose:
            - 3000
    frontend:
        command: bash -c "yarn install && yarn run build && node build"
        stop_grace_period: 3s
        restart: unless-stopped
        env_file: .env.frontend
        depends_on:
            - backend
        build:
            context: .
            target: frontend
        healthcheck:
            test: [ 'CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000 || exit 1' ]
        volumes:
            - ./frontend:/app
        networks:
            - backend
            - frontend
        expose:
            - 3000
        ports:
            - 3000:3000
    nginx:
        command: bash -c "nginx -g 'daemon off;'"
        stop_grace_period: 3s
        depends_on:
            - frontend
        restart: unless-stopped
        build:
            context: .
            target: nginx
        healthcheck:
            test: [ 'CMD-SHELL', 'wget -q --spider --proxy=off --no-check-certificate https://localhost || exit 1' ]
        volumes:
            - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:r
            - ./docker/nginx/app.conf:/etc/nginx/sites-enabled/default:r
            - ./docker/nginx/log:/var/log/nginx
        networks:
            - backend
            - frontend
        expose:
            - 443
        ports:
            - 443:443

networks:
    backend:
        internal: true
    frontend:
